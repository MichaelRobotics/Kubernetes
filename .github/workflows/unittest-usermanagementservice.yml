name: Test User Management Service

on:
  push:
    # Only trigger on branches other than main
    branches-ignore:
      - main
    paths:
      # Include changes to the usermanagement service code
      - 'opentelemetry-demo/src/usermanagementservice/**'
      # But exclude test files so changes to tests don't trigger the workflow
      - '!opentelemetry-demo/src/usermanagementservice/test/**'
      - '!opentelemetry-demo/src/usermanagementservice/**/*_test.go'
      # Still include proto file as it affects the service
      - 'opentelemetry-demo/pb/demo.proto'
  # Remove pull_request trigger as per requirements
  workflow_dispatch:  # Keep manual triggering
    inputs:
      test_scope:
        description: 'Scope of tests to run'
        required: true
        default: 'unit'
        type: choice
        options:
          - unit
          - setup
          - all
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      
      - name: Install Protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate Protobuf
        run: |
          cd opentelemetry-demo/src/usermanagementservice
          mkdir -p genproto/oteldemo
          protoc --go_out=. \
                 --go-grpc_out=. \
                 --proto_path=../../pb \
                 ../../pb/demo.proto

      - name: Install dependencies
        run: |
          cd opentelemetry-demo/src/usermanagementservice
          # Replace imports with local paths
          go mod edit -replace github.com/MichaelRobotics/Kubernetes/opentelemetry-demo/src/usermanagementservice/genproto/oteldemo=./genproto/oteldemo
          go mod edit -replace github.com/MichaelRobotics/Kubernetes/opentelemetry-demo/src/db/postgres=../db/postgres
          go mod tidy

          # Also set up replacements in other module files
          cd genproto/oteldemo
          go mod edit -replace github.com/MichaelRobotics/Kubernetes/opentelemetry-demo/src/usermanagementservice=../../
          go mod tidy

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Debug Info
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled == true }}
        run: |
          echo "Running in debug mode"
          echo "Go version: $(go version)"
          echo "Directory structure:"
          find opentelemetry-demo/src/usermanagementservice -type f | sort
          echo "go.mod content:"
          cat opentelemetry-demo/src/usermanagementservice/go.mod
          echo "genproto/oteldemo/go.mod content:"
          cat opentelemetry-demo/src/usermanagementservice/genproto/oteldemo/go.mod
        
        # Determine test type based on trigger
      - name: Set test type
        id: set-test-type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TEST_SCOPE=${{ inputs.test_scope }}" >> $GITHUB_ENV
          else
            echo "TEST_SCOPE=all" >> $GITHUB_ENV
          fi

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          
      # Run the appropriate test based on the test scope
      - name: Run unit tests
        if: ${{ env.TEST_SCOPE == 'unit' }}
        run: cd opentelemetry-demo && make user-management-service-unittest
      
      - name: Run setup test
        if: ${{ env.TEST_SCOPE == 'setup' }}
        run: cd opentelemetry-demo && make user-management-service-setup-test

      - name: Run all tests
        if: ${{ env.TEST_SCOPE == 'all' }}
        run: cd opentelemetry-demo && make user-management-service-unittest && make user-management-service-setup-test
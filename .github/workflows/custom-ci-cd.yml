name: "Custom CI/CD Pipeline"

on:
  # Run workflow only on push to main branch or manual trigger
  push:
    branches: [ main ]
    paths:
      - 'opentelemetry-demo/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for images'
        required: true
        default: 'latest'
        type: string

jobs:
  protobufcheck:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: opentelemetry-demo
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Generate Protobuf
        run: make docker-generate-protobuf
          
      - name: Check Clean Work Tree
        run: make check-clean-work-tree

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: protobufcheck
    defaults:
      run:
        working-directory: opentelemetry-demo
    outputs:
      version: ${{ steps.version.outputs.VERSION }}

    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        file_tag:
          - file: ./src/accounting/Dockerfile
            tag_suffix: otel-demo-accounting
            context: ./
          - file: ./src/ad/Dockerfile
            tag_suffix: otel-demo-ad
            context: ./
          - file: ./src/cart/src/Dockerfile
            tag_suffix: otel-demo-cart
            context: ./
          - file: ./src/checkout/Dockerfile
            tag_suffix: otel-demo-checkout
            context: ./
          - file: ./src/currency/Dockerfile
            tag_suffix: otel-demo-currency
            context: ./
          - file: ./src/email/Dockerfile
            tag_suffix: otel-demo-email
            context: ./
          - file: ./src/fraud-detection/Dockerfile
            tag_suffix: otel-demo-fraud-detection
            context: ./
          - file: ./src/frontend/Dockerfile
            tag_suffix: otel-demo-frontend
            context: ./
          - file: ./src/frontend-proxy/Dockerfile
            tag_suffix: otel-demo-frontend-proxy
            context: ./
          - file: ./src/image-provider/Dockerfile
            tag_suffix: otel-demo-image-provider
            context: ./
          - file: ./src/payment/Dockerfile
            tag_suffix: otel-demo-payment
            context: ./
          - file: ./src/product-catalog/Dockerfile
            tag_suffix: otel-demo-product-catalog
            context: ./
          - file: ./src/quote/Dockerfile
            tag_suffix: otel-demo-quote
            context: ./
          - file: ./src/recommendation/Dockerfile
            tag_suffix: otel-demo-recommendation
            context: ./
          - file: ./src/shipping/Dockerfile
            tag_suffix: otel-demo-shipping
            context: ./
          - file: ./src/flagd-ui/Dockerfile
            tag_suffix: otel-demo-flagd-ui
            context: ./
          # Infrastructure images - optional, uncomment if you want to build these too
          # - file: ./src/kafka/Dockerfile
          #   tag_suffix: otel-demo-kafka
          #   context: ./

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Load environment variables from .env file
        run: |
          if [ -f .env ]; then
            grep -vE '^\s*#|^\s*$' .env | while read -r line; do
              echo "$line" >> $GITHUB_ENV
            done
          else
            echo ".env file not found!"
            exit 1
          fi
          
      - name: Set default environment variables
        run: |
          # Set default values for environment variables if they are not already set
          echo "OPENTELEMETRY_CPP_VERSION=${OPENTELEMETRY_CPP_VERSION:-1.11.0}" >> $GITHUB_ENV
          echo "OTEL_JAVA_AGENT_VERSION=${OTEL_JAVA_AGENT_VERSION:-1.30.0}" >> $GITHUB_ENV
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name != 'pull_request'
        
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi
          
      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: opentelemetry-demo/${{ matrix.file_tag.context }}
          file: opentelemetry-demo/${{ matrix.file_tag.file }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            robclusterdev/clusterimages:${{ matrix.file_tag.tag_suffix }}
            robclusterdev/clusterimages:${{ steps.version.outputs.VERSION }}-${{ matrix.file_tag.tag_suffix }}
          build-args: |
            OTEL_JAVA_AGENT_VERSION=${{ env.OTEL_JAVA_AGENT_VERSION }}
            OPENTELEMETRY_CPP_VERSION=${{ env.OPENTELEMETRY_CPP_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration_tests:
    runs-on: ubuntu-latest
    needs: build_and_push_images
    defaults:
      run:
        working-directory: opentelemetry-demo
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up environment for testing
        run: |
          # Create .env.override to use the images we just built
          cat > .env.override << EOF
          # Use custom images built in the previous step
          IMAGE_NAME=robclusterdev/clusterimages
          DEMO_VERSION=otel-demo
          IMAGE_VERSION=${{ needs.build_and_push_images.outputs.version }}
          EOF
          
          # Docker login to pull the images
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          
      - name: Pull images
        run: |
          # Pull the necessary images instead of rebuilding them
          docker compose pull
          
      - name: Run Integration Tests
        run: |
          # Start the application using the pulled images
          docker compose up -d
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Run the tests
          make run-tracetesting
          
          # Cleanup
          docker compose down
      
      - name: Report Test Results
        if: always()
        run: |
          echo "Integration test results:"
          if [ $? -eq 0 ]; then
            echo "✅ All tests passed"
          else
            echo "❌ Tests failed"
            exit 1
          fi

  deploy_demo:
    runs-on: ubuntu-latest
    needs: integration_tests
    if: github.event_name != 'pull_request'
    defaults:
      run:
        working-directory: opentelemetry-demo
    steps:
      - uses: actions/checkout@v4
      
      - name: Update .env.override for deployment
        run: |
          cat > .env.override << EOF
          # Use custom images (uncomment and change to your container registry and image names)
          IMAGE_NAME=robclusterdev/clusterimages
          DEMO_VERSION=otel-demo
          IMAGE_VERSION=latest
          
          # Uncomment if you want to use public infrastructure images
          # COLLECTOR_CONTRIB_IMAGE=ghcr.io/open-feature/flagd:v0.12.1
          # FLAGD_IMAGE=ghcr.io/open-feature/flagd:v0.12.1
          # GRAFANA_IMAGE=grafana/grafana:11.5.2
          # JAEGERTRACING_IMAGE=jaegertracing/all-in-one:1.66.0
          # OPENSEARCH_IMAGE=opensearchproject/opensearch:2.19.0
          # POSTGRES_IMAGE=postgres:14.14-alpine
          # PROMETHEUS_IMAGE=quay.io/prometheus/prometheus:v3.2.0
          # VALKEY_IMAGE=valkey/valkey:8.1-alpine
          EOF
          
      - name: Display successful completion message
        run: |
          echo "=========================="
          echo "CI/CD Pipeline Completed!"
          echo "=========================="
          echo ""
          echo "All images have been built and pushed to: robclusterdev/clusterimages"
          echo ""
          echo "To deploy the application:"
          echo "1. Pull this repository"
          echo "2. Navigate to opentelemetry-demo"
          echo "3. Run 'make start'"
          echo ""
          echo "The application will use your custom images from robclusterdev/clusterimages" 
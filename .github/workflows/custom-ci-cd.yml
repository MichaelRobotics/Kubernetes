name: "Custom CI/CD Pipeline"

on:
  push:
    branches: [ main ]
    paths:
      - 'opentelemetry-demo/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for images'
        required: true
        default: 'latest'
        type: string

# Define global defaults
env:
  OPENTELEMETRY_CPP_VERSION: 1.11.0
  OTEL_JAVA_AGENT_VERSION: 1.30.0
  IMAGE_NAME: robclusterdev/clusterimages
  DEMO_VERSION: otel-demo
  IMAGE_VERSION_DEFAULT: latest
  TRACETEST_IMAGE_VERSION: v1.7.1
  # Define collector variables to prevent variable interpolation issues
  OTEL_COLLECTOR_HOST: otel-collector
  OTEL_COLLECTOR_PORT_GRPC: 4317
  OTEL_COLLECTOR_PORT_HTTP: 4318

defaults:
  run:
    working-directory: opentelemetry-demo

jobs:
  setup-env:
    runs-on: ubuntu-latest
    outputs:
      env_vars: ${{ steps.set-env.outputs.env_vars }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Load and set environment variables
        id: set-env
        run: |
          # Initialize a JSON object for environment variables
          ENV_JSON='{}'
          
          # Load defaults from workflow env
          ENV_JSON=$(echo "$ENV_JSON" | jq --arg val "${{ env.OPENTELEMETRY_CPP_VERSION }}" '.OPENTELEMETRY_CPP_VERSION = $val')
          ENV_JSON=$(echo "$ENV_JSON" | jq --arg val "${{ env.OTEL_JAVA_AGENT_VERSION }}" '.OTEL_JAVA_AGENT_VERSION = $val')
          ENV_JSON=$(echo "$ENV_JSON" | jq --arg val "${{ env.IMAGE_NAME }}" '.IMAGE_NAME = $val')
          ENV_JSON=$(echo "$ENV_JSON" | jq --arg val "${{ env.DEMO_VERSION }}" '.DEMO_VERSION = $val')
          ENV_JSON=$(echo "$ENV_JSON" | jq --arg val "${{ env.IMAGE_VERSION_DEFAULT }}" '.IMAGE_VERSION = $val')
          ENV_JSON=$(echo "$ENV_JSON" | jq --arg val "${{ env.TRACETEST_IMAGE_VERSION }}" '.TRACETEST_IMAGE_VERSION = $val')
          ENV_JSON=$(echo "$ENV_JSON" | jq --arg val "${{ env.OTEL_COLLECTOR_HOST }}" '.OTEL_COLLECTOR_HOST = $val')
          ENV_JSON=$(echo "$ENV_JSON" | jq --arg val "${{ env.OTEL_COLLECTOR_PORT_GRPC }}" '.OTEL_COLLECTOR_PORT_GRPC = $val')
          ENV_JSON=$(echo "$ENV_JSON" | jq --arg val "${{ env.OTEL_COLLECTOR_PORT_HTTP }}" '.OTEL_COLLECTOR_PORT_HTTP = $val')
          
          # Load .env if it exists
          if [ -f .env ]; then
            while IFS='=' read -r key value; do
              if [[ ! $key =~ ^\s*# && ! -z $key ]]; then
                value=$(echo "$value" | sed 's/^"\(.*\)"$/\1/')
                ENV_JSON=$(echo "$ENV_JSON" | jq --arg k "$key" --arg v "$value" '.[$k] = $v')
              fi
            done < <(grep -vE '^\s*#|^\s*$' .env)
          fi
          
          # Load .env.override if it exists
          if [ -f .env.override ]; then
            while IFS='=' read -r key value; do
              if [[ ! $key =~ ^\s*# && ! -z $key ]]; then
                value=$(echo "$value" | sed 's/^"\(.*\)"$/\1/')
                ENV_JSON=$(echo "$ENV_JSON" | jq --arg k "$key" --arg v "$value" '.[$k] = $v')
              fi
            done < <(grep -vE '^\s*#|^\s*$' .env.override)
          fi
          
          # Output the JSON for downstream jobs
          echo "env_vars=$(echo "$ENV_JSON" | jq -c .)" >> $GITHUB_OUTPUT

  protobufcheck:
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - uses: actions/checkout@v4
      
      - name: Apply environment variables
        run: |
          # Parse JSON and apply to GITHUB_ENV
          echo '${{ needs.setup-env.outputs.env_vars }}' | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
      
      - name: Generate Protobuf
        run: make docker-generate-protobuf
      
      - name: Check Clean Work Tree
        run: make check-clean-work-tree

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: [setup-env, protobufcheck]
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        file_tag:
          - { file: ./src/accounting/Dockerfile, tag_suffix: otel-demo-accounting, context: ./ }
          - { file: ./src/ad/Dockerfile, tag_suffix: otel-demo-ad, context: ./ }
          - { file: ./src/cart/src/Dockerfile, tag_suffix: otel-demo-cart, context: ./ }
          - { file: ./src/checkout/Dockerfile, tag_suffix: otel-demo-checkout, context: ./ }
          - { file: ./src/currency/Dockerfile, tag_suffix: otel-demo-currency, context: ./ }
          - { file: ./src/email/Dockerfile, tag_suffix: otel-demo-email, context: ./ }
          - { file: ./src/fraud-detection/Dockerfile, tag_suffix: otel-demo-fraud-detection, context: ./ }
          - { file: ./src/frontend/Dockerfile, tag_suffix: otel-demo-frontend, context: ./ }
          - { file: ./src/frontend-proxy/Dockerfile, tag_suffix: otel-demo-frontend-proxy, context: ./ }
          - { file: ./src/image-provider/Dockerfile, tag_suffix: otel-demo-image-provider, context: ./ }
          - { file: ./src/payment/Dockerfile, tag_suffix: otel-demo-payment, context: ./ }
          - { file: ./src/product-catalog/Dockerfile, tag_suffix: otel-demo-product-catalog, context: ./ }
          - { file: ./src/quote/Dockerfile, tag_suffix: otel-demo-quote, context: ./ }
          - { file: ./src/recommendation/Dockerfile, tag_suffix: otel-demo-recommendation, context: ./ }
          - { file: ./src/shipping/Dockerfile, tag_suffix: otel-demo-shipping, context: ./ }
          - { file: ./src/flagd-ui/Dockerfile, tag_suffix: otel-demo-flagd-ui, context: ./ }
          - { file: ./src/usermanagementservice/Dockerfile, tag_suffix: otel-demo-usermanagementservice, context: ./ }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Apply environment variables
        run: |
          # Parse JSON and apply to GITHUB_ENV
          echo '${{ needs.setup-env.outputs.env_vars }}' | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Determine version
        id: version
        run: echo "VERSION=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || env.IMAGE_VERSION }}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: opentelemetry-demo/${{ matrix.file_tag.context }}
          file: opentelemetry-demo/${{ matrix.file_tag.file }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.file_tag.tag_suffix }}
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}-${{ matrix.file_tag.tag_suffix }}
          build-args: |
            OTEL_JAVA_AGENT_VERSION=${{ env.OTEL_JAVA_AGENT_VERSION }}
            OPENTELEMETRY_CPP_VERSION=${{ env.OPENTELEMETRY_CPP_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration_tests:
    runs-on: ubuntu-latest
    needs: [setup-env, build_and_push_images]
    steps:
      - uses: actions/checkout@v4
      
      - name: Apply environment variables
        run: |
          # Parse JSON and apply to GITHUB_ENV
          echo '${{ needs.setup-env.outputs.env_vars }}' | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
      
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      
      - name: Prepare tracetest run script and configuration
        run: |
          # Create directory for logs
          mkdir -p test-logs
          
          # Check and modify the run.bash script
          echo "Modifying run.bash script to use explicit values..."
          if [ -f "./test/tracetesting/run.bash" ]; then
            # Save original for reference
            cp ./test/tracetesting/run.bash ./test-logs/run.bash.original
            
            # Replace environment variable references with explicit values
            sed -i 's/\${OTEL_COLLECTOR_HOST}/otel-collector/g; s/\${OTEL_COLLECTOR_PORT_GRPC}/4317/g; s/\${OTEL_COLLECTOR_PORT_HTTP}/4318/g' "./test/tracetesting/run.bash"
            
            echo "Updated run.bash script:"
            cat "./test/tracetesting/run.bash"
          else
            echo "WARNING: run.bash not found at expected location"
            find ./test -name "run.bash" | xargs ls -la
          fi
          
          # Also check and update the tracetest-config.yaml file
          if [ -f "./test/tracetesting/tracetest-config.yaml" ]; then
            # Save original for reference
            cp ./test/tracetesting/tracetest-config.yaml ./test-logs/tracetest-config.yaml.original
            
            # Replace environment variable references
            sed -i 's/\${OTEL_COLLECTOR_HOST}/otel-collector/g; s/\${OTEL_COLLECTOR_PORT_GRPC}/4317/g; s/\${OTEL_COLLECTOR_PORT_HTTP}/4318/g' "./test/tracetesting/tracetest-config.yaml"
            
            echo "Updated tracetest-config.yaml:"
            cat "./test/tracetesting/tracetest-config.yaml"
          fi
          
          # Modify tracetesting-vars.yaml if it exists (this file is created by run.bash)
          if [ -f "./test/tracetesting/tracetesting-vars.yaml" ]; then
            # Save original for reference
            cp ./test/tracetesting/tracetesting-vars.yaml ./test-logs/tracetesting-vars.yaml.original
            
            # Replace environment variable references
            sed -i 's/\${OTEL_COLLECTOR_HOST}/otel-collector/g; s/\${OTEL_COLLECTOR_PORT_GRPC}/4317/g; s/\${OTEL_COLLECTOR_PORT_HTTP}/4318/g' "./test/tracetesting/tracetesting-vars.yaml"
            
            echo "Updated tracetesting-vars.yaml:"
            cat "./test/tracetesting/tracetesting-vars.yaml"
          fi
      
      - name: Set up environment and run integration tests
        env:
          IMAGE_VERSION: ${{ needs.build_and_push_images.outputs.version }}
          OTEL_COLLECTOR_HOST: otel-collector
          OTEL_COLLECTOR_PORT_GRPC: 4317
          OTEL_COLLECTOR_PORT_HTTP: 4318
          TRACETEST_IMAGE_VERSION: ${{ env.TRACETEST_IMAGE_VERSION }}
        run: |
          # Create proper .env files with all required variables
          cat > .env <<EOF
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          DEMO_VERSION=${{ env.DEMO_VERSION }}
          IMAGE_VERSION=${{ env.IMAGE_VERSION }}
          OTEL_COLLECTOR_HOST=otel-collector
          OTEL_COLLECTOR_PORT_GRPC=4317
          OTEL_COLLECTOR_PORT_HTTP=4318
          TRACETEST_IMAGE_VERSION=${{ env.TRACETEST_IMAGE_VERSION }}
          FLAGD_HOST=flagd
          FLAGD_PORT=8013
          FLAGD_UI_HOST=flagd-ui
          FLAGD_UI_PORT=4000
          KAFKA_PORT=9092
          KAFKA_ADDR=kafka:9092
          VALKEY_PORT=6379
          VALKEY_ADDR=valkey-cart:6379
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_DB=postgres
          POSTGRES_PORT=5432
          POSTGRES_HOST=postgres
          DB_CONN=postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable
          GRAFANA_PORT=3000
          GRAFANA_HOST=grafana
          JAEGER_PORT=16686
          JAEGER_HOST=jaeger
          PROMETHEUS_PORT=9090
          PROMETHEUS_HOST=prometheus
          PROMETHEUS_ADDR=prometheus:9090
          EOF
          
          # Create .env.override with the same values to ensure consistency
          cp .env .env.override
          
          # Show the environment for debugging
          echo "Environment for docker-compose:"
          cat .env
          
          # Start services
          docker compose pull
          docker compose up -d
          
          # Wait for frontend service with fixed values
          echo "Waiting for frontend service to become available..."
          
          # Using a script with hardcoded values to avoid variable issues
          cat > wait-for-frontend.sh <<EOF
          #!/bin/bash
          TIMEOUT=180
          INTERVAL=5
          elapsed=0
          
          echo "Starting health check loop with timeout \$TIMEOUT seconds"
          while [ \$elapsed -lt \$TIMEOUT ]; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 | grep -q "200"; then
              echo "Frontend is responding!"
              exit 0
            fi
            echo "Waiting for frontend service... (\${elapsed}/\${TIMEOUT}s)"
            sleep \$INTERVAL
            elapsed=\$((elapsed + INTERVAL))
          done
          
          echo "Frontend service did not become available within timeout period"
          exit 1
          EOF
          
          # Make the script executable
          chmod +x wait-for-frontend.sh
          
          # Run the script
          if ! ./wait-for-frontend.sh; then
            echo "Frontend service health check failed"
            docker compose logs frontend
            docker compose down
            exit 1
          fi
          
          # Check ad service integration with explicit script
          echo "Checking if ad service integration is working..."
          cat > check-ad-service.sh <<EOF
          #!/bin/bash
          if ! curl -s -X GET http://localhost:8080/api/data -H "Content-Type: application/json" -d '{"contextKeys":["test"]}' | grep -q "redirectUrl"; then
            echo "Ad service integration test failed"
            exit 1
          fi
          echo "Ad service integration is working"
          exit 0
          EOF
          
          # Make the script executable
          chmod +x check-ad-service.sh
          
          # Run the script
          if ! ./check-ad-service.sh; then
            echo "Ad service integration test failed"
            docker compose logs ad
            docker compose down
            exit 1
          fi
          
          echo "Services initialized successfully, adding stabilization delay..."
          sleep 20
          
          # Export variables explicitly to ensure they're available in subshells
          export OTEL_COLLECTOR_HOST=otel-collector
          export OTEL_COLLECTOR_PORT_GRPC=4317
          export OTEL_COLLECTOR_PORT_HTTP=4318

          # Run trace tests and capture exit code
          echo "Running trace tests..."
          make run-tracetesting | tee tracetests.log
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          
          # If tests failed, collect and show logs
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "Trace tests failed with exit code $TEST_EXIT_CODE"
            echo "Collecting logs from critical services..."
            docker compose logs --tail=100 tracetest-server
            docker compose logs --tail=50 otel-collector
            docker compose logs --tail=50 frontend
            echo "Test output:"
            cat tracetests.log
          else
            echo "Trace tests completed successfully"
          fi
          
          # Always collect logs for analysis

          docker compose logs tracetest-server > test-logs/tracetest-server.log
          docker compose logs otel-collector > test-logs/otel-collector.log
          
          # Clean up
          docker compose down
          
          # Return the actual test exit code
          exit $TEST_EXIT_CODE

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: opentelemetry-demo/test-logs/
          retention-days: 5

  deploy_demo:
    runs-on: ubuntu-latest
    needs: [setup-env, integration_tests]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Apply environment variables
        run: |
          # Parse JSON and apply to GITHUB_ENV
          echo '${{ needs.setup-env.outputs.env_vars }}' | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
      
      - name: Update environment files for deployment
        run: |
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" > .env
          echo "DEMO_VERSION=${{ env.DEMO_VERSION }}" >> .env
          echo "IMAGE_VERSION=${{ env.IMAGE_VERSION }}" >> .env
          echo "OTEL_COLLECTOR_HOST=otel-collector" >> .env
          echo "OTEL_COLLECTOR_PORT_GRPC=4317" >> .env
          echo "OTEL_COLLECTOR_PORT_HTTP=4318" >> .env
          echo "TRACETEST_IMAGE_VERSION=${{ env.TRACETEST_IMAGE_VERSION }}" >> .env
          
          cp .env .env.override
      
      - name: Display successful completion message
        run: |
          echo "=========================="
          echo "CI/CD Pipeline Completed!"
          echo "=========================="
          echo "All images have been built and pushed to: ${{ env.IMAGE_NAME }}"
          echo "To deploy the application:"
          echo "1. Pull this repository"
          echo "2. Navigate to opentelemetry-demo"
          echo "3. Run 'make start'"
          echo "The application will use your custom images from ${{ env.IMAGE_NAME }}"